apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.realtor.jx"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode VERSION_CODE as int
        versionName VERSION_NAME
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        checkReleaseBuilds false
        abortOnError false
    }
    signingConfigs {
        debug { // debug使用正式签名
            keyAlias 'jx'
            keyPassword 'realtorjx'
            storeFile file("../jx.jks")
            storePassword 'realtorjx'
        }
        release {
            keyAlias 'jx'
            keyPassword 'realtorjx'
            storeFile file("../jx.jks")
            storePassword 'realtorjx'
        }
    }
    buildTypes {
        release {
            minifyEnabled true//定义是否运行混淆
            zipAlignEnabled true
            shrinkResources false
            signingConfig signingConfigs.release
            proguardFiles 'proguard-rules.pro'
            debuggable false
        }
        debug {
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            proguardFiles 'proguard-rules.pro'
            debuggable true
        }
    }
    flavorDimensions 'environment'
    productFlavors {
        Local{
            buildConfigField "String", "V_TAG", "\"" + getName() + "\""
            buildConfigField "String", "SERVER_ADD", LOCAL_ADDRESS
            buildConfigField "String", "SYMMETRIC_ENCRYPTION_KEY", LOCAL_KEY
            dimension "environment"
        }
        Test {
            buildConfigField "String", "V_TAG", "\"" + getName() + "\""
            buildConfigField "String", "SERVER_ADD", TEST_ADDRESS
            buildConfigField "String", "SYMMETRIC_ENCRYPTION_KEY", TEST_KEY
            dimension "environment"
        }
        Product {
            buildConfigField "String", "V_TAG", "\"\""
            buildConfigField "String", "SERVER_ADD", PRODUCT_ADDRESS
            buildConfigField "String", "SYMMETRIC_ENCRYPTION_KEY", PRODUCT_KEY
            dimension "environment"
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:appcompat-v7:${rootProject.ext.supportLibraryVersion}"
    compile "com.android.support:recyclerview-v7:${rootProject.ext.supportLibraryVersion}"
    compile "com.android.support:design:${rootProject.ext.supportLibraryVersion}"
    // retrofit
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    // retsrofit 解析器
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    // EventBus
    compile 'org.greenrobot:eventbus:3.1.1'
    // okhttp log打印
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    // glide 图片处理
    compile 'com.github.bumptech.glide:glide:3.8.0'
    //Walle
    compile 'com.meituan.android.walle:library:1.1.5'
    //SmartRefreshLayout
    compile 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.3'
    compile 'com.alibaba:fastjson:1.1.55.android'
    // Logger
    compile 'com.orhanobut:logger:2.1.1'
    //Matisse
    compile 'com.zhihu.android:matisse:0.5.0-beta3'
    // permissionsDispatcher
    compile('com.github.hotchemi:permissionsdispatcher:3.0.1') {
        // if you don't use android.app.Fragment you can exclude support for them
        exclude module: "support-v13"
    }
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:3.0.1"
    //Luban
    compile 'top.zibin:Luban:1.1.3'
}
